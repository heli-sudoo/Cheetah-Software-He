"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class solver_info_lcmt(object):
    __slots__ = ["n_iter", "n_ls_iter", "n_reg_iter", "solve_time", "cost", "dyn_feas", "ineq_violation", "eq_violation"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None]

    def __init__(self):
        self.n_iter = 0
        self.n_ls_iter = 0
        self.n_reg_iter = 0
        self.solve_time = 0.0
        self.cost = 0.0
        self.dyn_feas = 0.0
        self.ineq_violation = 0.0
        self.eq_violation = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(solver_info_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiifffff", self.n_iter, self.n_ls_iter, self.n_reg_iter, self.solve_time, self.cost, self.dyn_feas, self.ineq_violation, self.eq_violation))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != solver_info_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return solver_info_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = solver_info_lcmt()
        self.n_iter, self.n_ls_iter, self.n_reg_iter, self.solve_time, self.cost, self.dyn_feas, self.ineq_violation, self.eq_violation = struct.unpack(">iiifffff", buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if solver_info_lcmt in parents: return 0
        tmphash = (0xae2a17ed06504592) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if solver_info_lcmt._packed_fingerprint is None:
            solver_info_lcmt._packed_fingerprint = struct.pack(">Q", solver_info_lcmt._get_hash_recursive([]))
        return solver_info_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", solver_info_lcmt._get_packed_fingerprint())[0]

