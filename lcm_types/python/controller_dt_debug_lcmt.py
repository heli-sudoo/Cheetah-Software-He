"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class controller_dt_debug_lcmt(object):
    __slots__ = ["mpctime", "systime", "iter", "iter_loco"]

    __typenames__ = ["float", "float", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.mpctime = 0.0
        self.systime = 0.0
        self.iter = 0
        self.iter_loco = 0

    def encode(self):
        buf = BytesIO()
        buf.write(controller_dt_debug_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ffii", self.mpctime, self.systime, self.iter, self.iter_loco))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != controller_dt_debug_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return controller_dt_debug_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = controller_dt_debug_lcmt()
        self.mpctime, self.systime, self.iter, self.iter_loco = struct.unpack(">ffii", buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if controller_dt_debug_lcmt in parents: return 0
        tmphash = (0x7884199f177d27ba) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if controller_dt_debug_lcmt._packed_fingerprint is None:
            controller_dt_debug_lcmt._packed_fingerprint = struct.pack(">Q", controller_dt_debug_lcmt._get_hash_recursive([]))
        return controller_dt_debug_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", controller_dt_debug_lcmt._get_packed_fingerprint())[0]

