"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class debug_tracking_lcmt(object):
    __slots__ = ["time", "contact", "tau", "eul_des", "pos_des", "qJ_des", "vWorld_des", "eulrate_des", "qJd_des", "eul", "pos", "qJ", "vWorld", "eulrate", "qJd"]

    __typenames__ = ["float", "int32_t", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, [4], [12], [3], [3], [12], [3], [3], [12], [3], [3], [12], [3], [3], [12]]

    def __init__(self):
        self.time = 0.0
        self.contact = [ 0 for dim0 in range(4) ]
        self.tau = [ 0.0 for dim0 in range(12) ]
        self.eul_des = [ 0.0 for dim0 in range(3) ]
        self.pos_des = [ 0.0 for dim0 in range(3) ]
        self.qJ_des = [ 0.0 for dim0 in range(12) ]
        self.vWorld_des = [ 0.0 for dim0 in range(3) ]
        self.eulrate_des = [ 0.0 for dim0 in range(3) ]
        self.qJd_des = [ 0.0 for dim0 in range(12) ]
        self.eul = [ 0.0 for dim0 in range(3) ]
        self.pos = [ 0.0 for dim0 in range(3) ]
        self.qJ = [ 0.0 for dim0 in range(12) ]
        self.vWorld = [ 0.0 for dim0 in range(3) ]
        self.eulrate = [ 0.0 for dim0 in range(3) ]
        self.qJd = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(debug_tracking_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">f", self.time))
        buf.write(struct.pack('>4i', *self.contact[:4]))
        buf.write(struct.pack('>12f', *self.tau[:12]))
        buf.write(struct.pack('>3f', *self.eul_des[:3]))
        buf.write(struct.pack('>3f', *self.pos_des[:3]))
        buf.write(struct.pack('>12f', *self.qJ_des[:12]))
        buf.write(struct.pack('>3f', *self.vWorld_des[:3]))
        buf.write(struct.pack('>3f', *self.eulrate_des[:3]))
        buf.write(struct.pack('>12f', *self.qJd_des[:12]))
        buf.write(struct.pack('>3f', *self.eul[:3]))
        buf.write(struct.pack('>3f', *self.pos[:3]))
        buf.write(struct.pack('>12f', *self.qJ[:12]))
        buf.write(struct.pack('>3f', *self.vWorld[:3]))
        buf.write(struct.pack('>3f', *self.eulrate[:3]))
        buf.write(struct.pack('>12f', *self.qJd[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != debug_tracking_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return debug_tracking_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = debug_tracking_lcmt()
        self.time = struct.unpack(">f", buf.read(4))[0]
        self.contact = struct.unpack('>4i', buf.read(16))
        self.tau = struct.unpack('>12f', buf.read(48))
        self.eul_des = struct.unpack('>3f', buf.read(12))
        self.pos_des = struct.unpack('>3f', buf.read(12))
        self.qJ_des = struct.unpack('>12f', buf.read(48))
        self.vWorld_des = struct.unpack('>3f', buf.read(12))
        self.eulrate_des = struct.unpack('>3f', buf.read(12))
        self.qJd_des = struct.unpack('>12f', buf.read(48))
        self.eul = struct.unpack('>3f', buf.read(12))
        self.pos = struct.unpack('>3f', buf.read(12))
        self.qJ = struct.unpack('>12f', buf.read(48))
        self.vWorld = struct.unpack('>3f', buf.read(12))
        self.eulrate = struct.unpack('>3f', buf.read(12))
        self.qJd = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if debug_tracking_lcmt in parents: return 0
        tmphash = (0xb72ab993032369c4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if debug_tracking_lcmt._packed_fingerprint is None:
            debug_tracking_lcmt._packed_fingerprint = struct.pack(">Q", debug_tracking_lcmt._get_hash_recursive([]))
        return debug_tracking_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", debug_tracking_lcmt._get_packed_fingerprint())[0]

