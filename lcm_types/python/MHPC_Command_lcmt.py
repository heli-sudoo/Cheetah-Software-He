"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class MHPC_Command_lcmt(object):
    __slots__ = ["N_mpcsteps", "mpc_times", "torque", "eul", "pos", "qJ", "vWorld", "eulrate", "qJd", "GRF", "feedback", "Qu", "Quu", "Qux", "contacts", "statusTimes"]

    __typenames__ = ["int32_t", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "int32_t", "float"]

    __dimensions__ = [None, ["N_mpcsteps"], ["N_mpcsteps", 12], ["N_mpcsteps", 3], ["N_mpcsteps", 3], ["N_mpcsteps", 12], ["N_mpcsteps", 3], ["N_mpcsteps", 3], ["N_mpcsteps", 12], ["N_mpcsteps", 12], ["N_mpcsteps", 432], ["N_mpcsteps", 12], ["N_mpcsteps", 144], ["N_mpcsteps", 432], ["N_mpcsteps", 4], ["N_mpcsteps", 4]]

    def __init__(self):
        self.N_mpcsteps = 0
        self.mpc_times = []
        self.torque = []
        self.eul = []
        self.pos = []
        self.qJ = []
        self.vWorld = []
        self.eulrate = []
        self.qJd = []
        self.GRF = []
        self.feedback = []
        self.Qu = []
        self.Quu = []
        self.Qux = []
        self.contacts = []
        self.statusTimes = []

    def encode(self):
        buf = BytesIO()
        buf.write(MHPC_Command_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.N_mpcsteps))
        buf.write(struct.pack('>%df' % self.N_mpcsteps, *self.mpc_times[:self.N_mpcsteps]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>12f', *self.torque[i0][:12]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>3f', *self.eul[i0][:3]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>3f', *self.pos[i0][:3]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>12f', *self.qJ[i0][:12]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>3f', *self.vWorld[i0][:3]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>3f', *self.eulrate[i0][:3]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>12f', *self.qJd[i0][:12]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>12f', *self.GRF[i0][:12]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>432f', *self.feedback[i0][:432]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>12f', *self.Qu[i0][:12]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>144f', *self.Quu[i0][:144]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>432f', *self.Qux[i0][:432]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>4i', *self.contacts[i0][:4]))
        for i0 in range(self.N_mpcsteps):
            buf.write(struct.pack('>4f', *self.statusTimes[i0][:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != MHPC_Command_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return MHPC_Command_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = MHPC_Command_lcmt()
        self.N_mpcsteps = struct.unpack(">i", buf.read(4))[0]
        self.mpc_times = struct.unpack('>%df' % self.N_mpcsteps, buf.read(self.N_mpcsteps * 4))
        self.torque = []
        for i0 in range(self.N_mpcsteps):
            self.torque.append(struct.unpack('>12f', buf.read(48)))
        self.eul = []
        for i0 in range(self.N_mpcsteps):
            self.eul.append(struct.unpack('>3f', buf.read(12)))
        self.pos = []
        for i0 in range(self.N_mpcsteps):
            self.pos.append(struct.unpack('>3f', buf.read(12)))
        self.qJ = []
        for i0 in range(self.N_mpcsteps):
            self.qJ.append(struct.unpack('>12f', buf.read(48)))
        self.vWorld = []
        for i0 in range(self.N_mpcsteps):
            self.vWorld.append(struct.unpack('>3f', buf.read(12)))
        self.eulrate = []
        for i0 in range(self.N_mpcsteps):
            self.eulrate.append(struct.unpack('>3f', buf.read(12)))
        self.qJd = []
        for i0 in range(self.N_mpcsteps):
            self.qJd.append(struct.unpack('>12f', buf.read(48)))
        self.GRF = []
        for i0 in range(self.N_mpcsteps):
            self.GRF.append(struct.unpack('>12f', buf.read(48)))
        self.feedback = []
        for i0 in range(self.N_mpcsteps):
            self.feedback.append(struct.unpack('>432f', buf.read(1728)))
        self.Qu = []
        for i0 in range(self.N_mpcsteps):
            self.Qu.append(struct.unpack('>12f', buf.read(48)))
        self.Quu = []
        for i0 in range(self.N_mpcsteps):
            self.Quu.append(struct.unpack('>144f', buf.read(576)))
        self.Qux = []
        for i0 in range(self.N_mpcsteps):
            self.Qux.append(struct.unpack('>432f', buf.read(1728)))
        self.contacts = []
        for i0 in range(self.N_mpcsteps):
            self.contacts.append(struct.unpack('>4i', buf.read(16)))
        self.statusTimes = []
        for i0 in range(self.N_mpcsteps):
            self.statusTimes.append(struct.unpack('>4f', buf.read(16)))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if MHPC_Command_lcmt in parents: return 0
        tmphash = (0x89db73fa18a9429f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if MHPC_Command_lcmt._packed_fingerprint is None:
            MHPC_Command_lcmt._packed_fingerprint = struct.pack(">Q", MHPC_Command_lcmt._get_hash_recursive([]))
        return MHPC_Command_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", MHPC_Command_lcmt._get_packed_fingerprint())[0]

