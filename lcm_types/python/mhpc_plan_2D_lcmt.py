"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class mhpc_plan_2D_lcmt(object):
    __slots__ = ["Pos", "rpy", "q_knee", "q_hip", "Vel", "omega", "qd_knee", "qd_hip", "microtime"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[2, 100], [100], [2, 100], [2, 100], [2, 100], [100], [2, 100], [2, 100], [100]]

    def __init__(self):
        self.Pos = [ [ 0.0 for dim1 in range(100) ] for dim0 in range(2) ]
        self.rpy = [ 0.0 for dim0 in range(100) ]
        self.q_knee = [ [ 0.0 for dim1 in range(100) ] for dim0 in range(2) ]
        self.q_hip = [ [ 0.0 for dim1 in range(100) ] for dim0 in range(2) ]
        self.Vel = [ [ 0.0 for dim1 in range(100) ] for dim0 in range(2) ]
        self.omega = [ 0.0 for dim0 in range(100) ]
        self.qd_knee = [ [ 0.0 for dim1 in range(100) ] for dim0 in range(2) ]
        self.qd_hip = [ [ 0.0 for dim1 in range(100) ] for dim0 in range(2) ]
        self.microtime = [ 0.0 for dim0 in range(100) ]

    def encode(self):
        buf = BytesIO()
        buf.write(mhpc_plan_2D_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        for i0 in range(2):
            buf.write(struct.pack('>100f', *self.Pos[i0][:100]))
        buf.write(struct.pack('>100f', *self.rpy[:100]))
        for i0 in range(2):
            buf.write(struct.pack('>100f', *self.q_knee[i0][:100]))
        for i0 in range(2):
            buf.write(struct.pack('>100f', *self.q_hip[i0][:100]))
        for i0 in range(2):
            buf.write(struct.pack('>100f', *self.Vel[i0][:100]))
        buf.write(struct.pack('>100f', *self.omega[:100]))
        for i0 in range(2):
            buf.write(struct.pack('>100f', *self.qd_knee[i0][:100]))
        for i0 in range(2):
            buf.write(struct.pack('>100f', *self.qd_hip[i0][:100]))
        buf.write(struct.pack('>100f', *self.microtime[:100]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mhpc_plan_2D_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mhpc_plan_2D_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = mhpc_plan_2D_lcmt()
        self.Pos = []
        for i0 in range(2):
            self.Pos.append(struct.unpack('>100f', buf.read(400)))
        self.rpy = struct.unpack('>100f', buf.read(400))
        self.q_knee = []
        for i0 in range(2):
            self.q_knee.append(struct.unpack('>100f', buf.read(400)))
        self.q_hip = []
        for i0 in range(2):
            self.q_hip.append(struct.unpack('>100f', buf.read(400)))
        self.Vel = []
        for i0 in range(2):
            self.Vel.append(struct.unpack('>100f', buf.read(400)))
        self.omega = struct.unpack('>100f', buf.read(400))
        self.qd_knee = []
        for i0 in range(2):
            self.qd_knee.append(struct.unpack('>100f', buf.read(400)))
        self.qd_hip = []
        for i0 in range(2):
            self.qd_hip.append(struct.unpack('>100f', buf.read(400)))
        self.microtime = struct.unpack('>100f', buf.read(400))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if mhpc_plan_2D_lcmt in parents: return 0
        tmphash = (0x8bab580a55a27bd5) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if mhpc_plan_2D_lcmt._packed_fingerprint is None:
            mhpc_plan_2D_lcmt._packed_fingerprint = struct.pack(">Q", mhpc_plan_2D_lcmt._get_hash_recursive([]))
        return mhpc_plan_2D_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", mhpc_plan_2D_lcmt._get_packed_fingerprint())[0]

