/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class mhpc_plan_3D_lcmt implements lcm.lcm.LCMEncodable
{
    public float Pos[][];
    public float rpy[][];
    public float quat[][];
    public float q_knee[][];
    public float q_hip[][];
    public float v_world[][];
    public float omega_world[][];
    public float omega_body[][];
    public float microtime[];
 
    public mhpc_plan_3D_lcmt()
    {
        Pos = new float[3][100];
        rpy = new float[3][100];
        quat = new float[4][100];
        q_knee = new float[4][100];
        q_hip = new float[4][100];
        v_world = new float[3][100];
        omega_world = new float[3][100];
        omega_body = new float[3][100];
        microtime = new float[100];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7466efdedbbbab26L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.mhpc_plan_3D_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.mhpc_plan_3D_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                outs.writeFloat(this.Pos[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                outs.writeFloat(this.rpy[a][b]); 
            }
        }
 
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 100; b++) {
                outs.writeFloat(this.quat[a][b]); 
            }
        }
 
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 100; b++) {
                outs.writeFloat(this.q_knee[a][b]); 
            }
        }
 
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 100; b++) {
                outs.writeFloat(this.q_hip[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                outs.writeFloat(this.v_world[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                outs.writeFloat(this.omega_world[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                outs.writeFloat(this.omega_body[a][b]); 
            }
        }
 
        for (int a = 0; a < 100; a++) {
            outs.writeFloat(this.microtime[a]); 
        }
 
    }
 
    public mhpc_plan_3D_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public mhpc_plan_3D_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.mhpc_plan_3D_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.mhpc_plan_3D_lcmt o = new lcmtypes.mhpc_plan_3D_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.Pos = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                this.Pos[a][b] = ins.readFloat();
            }
        }
 
        this.rpy = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                this.rpy[a][b] = ins.readFloat();
            }
        }
 
        this.quat = new float[(int) 4][(int) 100];
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 100; b++) {
                this.quat[a][b] = ins.readFloat();
            }
        }
 
        this.q_knee = new float[(int) 4][(int) 100];
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 100; b++) {
                this.q_knee[a][b] = ins.readFloat();
            }
        }
 
        this.q_hip = new float[(int) 4][(int) 100];
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 100; b++) {
                this.q_hip[a][b] = ins.readFloat();
            }
        }
 
        this.v_world = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                this.v_world[a][b] = ins.readFloat();
            }
        }
 
        this.omega_world = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                this.omega_world[a][b] = ins.readFloat();
            }
        }
 
        this.omega_body = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                this.omega_body[a][b] = ins.readFloat();
            }
        }
 
        this.microtime = new float[(int) 100];
        for (int a = 0; a < 100; a++) {
            this.microtime[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.mhpc_plan_3D_lcmt copy()
    {
        lcmtypes.mhpc_plan_3D_lcmt outobj = new lcmtypes.mhpc_plan_3D_lcmt();
        outobj.Pos = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            System.arraycopy(this.Pos[a], 0, outobj.Pos[a], 0, 100);        }
 
        outobj.rpy = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            System.arraycopy(this.rpy[a], 0, outobj.rpy[a], 0, 100);        }
 
        outobj.quat = new float[(int) 4][(int) 100];
        for (int a = 0; a < 4; a++) {
            System.arraycopy(this.quat[a], 0, outobj.quat[a], 0, 100);        }
 
        outobj.q_knee = new float[(int) 4][(int) 100];
        for (int a = 0; a < 4; a++) {
            System.arraycopy(this.q_knee[a], 0, outobj.q_knee[a], 0, 100);        }
 
        outobj.q_hip = new float[(int) 4][(int) 100];
        for (int a = 0; a < 4; a++) {
            System.arraycopy(this.q_hip[a], 0, outobj.q_hip[a], 0, 100);        }
 
        outobj.v_world = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            System.arraycopy(this.v_world[a], 0, outobj.v_world[a], 0, 100);        }
 
        outobj.omega_world = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            System.arraycopy(this.omega_world[a], 0, outobj.omega_world[a], 0, 100);        }
 
        outobj.omega_body = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            System.arraycopy(this.omega_body[a], 0, outobj.omega_body[a], 0, 100);        }
 
        outobj.microtime = new float[(int) 100];
        System.arraycopy(this.microtime, 0, outobj.microtime, 0, 100); 
        return outobj;
    }
 
}

