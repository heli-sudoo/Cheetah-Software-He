/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class debug_tracking_lcmt implements lcm.lcm.LCMEncodable
{
    public float time;
    public int contact[];
    public float tau[];
    public float eul_des[];
    public float pos_des[];
    public float qJ_des[];
    public float vWorld_des[];
    public float eulrate_des[];
    public float qJd_des[];
    public float eul[];
    public float pos[];
    public float qJ[];
    public float vWorld[];
    public float eulrate[];
    public float qJd[];
 
    public debug_tracking_lcmt()
    {
        contact = new int[4];
        tau = new float[12];
        eul_des = new float[3];
        pos_des = new float[3];
        qJ_des = new float[12];
        vWorld_des = new float[3];
        eulrate_des = new float[3];
        qJd_des = new float[12];
        eul = new float[3];
        pos = new float[3];
        qJ = new float[12];
        vWorld = new float[3];
        eulrate = new float[3];
        qJd = new float[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xb72ab993032369c4L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.debug_tracking_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.debug_tracking_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeFloat(this.time); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeInt(this.contact[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.tau[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.eul_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pos_des[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.qJ_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vWorld_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.eulrate_des[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.qJd_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.eul[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pos[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.qJ[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vWorld[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.eulrate[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeFloat(this.qJd[a]); 
        }
 
    }
 
    public debug_tracking_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public debug_tracking_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.debug_tracking_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.debug_tracking_lcmt o = new lcmtypes.debug_tracking_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.time = ins.readFloat();
 
        this.contact = new int[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.contact[a] = ins.readInt();
        }
 
        this.tau = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tau[a] = ins.readFloat();
        }
 
        this.eul_des = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.eul_des[a] = ins.readFloat();
        }
 
        this.pos_des = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pos_des[a] = ins.readFloat();
        }
 
        this.qJ_des = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.qJ_des[a] = ins.readFloat();
        }
 
        this.vWorld_des = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vWorld_des[a] = ins.readFloat();
        }
 
        this.eulrate_des = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.eulrate_des[a] = ins.readFloat();
        }
 
        this.qJd_des = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.qJd_des[a] = ins.readFloat();
        }
 
        this.eul = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.eul[a] = ins.readFloat();
        }
 
        this.pos = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pos[a] = ins.readFloat();
        }
 
        this.qJ = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.qJ[a] = ins.readFloat();
        }
 
        this.vWorld = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vWorld[a] = ins.readFloat();
        }
 
        this.eulrate = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.eulrate[a] = ins.readFloat();
        }
 
        this.qJd = new float[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.qJd[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.debug_tracking_lcmt copy()
    {
        lcmtypes.debug_tracking_lcmt outobj = new lcmtypes.debug_tracking_lcmt();
        outobj.time = this.time;
 
        outobj.contact = new int[(int) 4];
        System.arraycopy(this.contact, 0, outobj.contact, 0, 4); 
        outobj.tau = new float[(int) 12];
        System.arraycopy(this.tau, 0, outobj.tau, 0, 12); 
        outobj.eul_des = new float[(int) 3];
        System.arraycopy(this.eul_des, 0, outobj.eul_des, 0, 3); 
        outobj.pos_des = new float[(int) 3];
        System.arraycopy(this.pos_des, 0, outobj.pos_des, 0, 3); 
        outobj.qJ_des = new float[(int) 12];
        System.arraycopy(this.qJ_des, 0, outobj.qJ_des, 0, 12); 
        outobj.vWorld_des = new float[(int) 3];
        System.arraycopy(this.vWorld_des, 0, outobj.vWorld_des, 0, 3); 
        outobj.eulrate_des = new float[(int) 3];
        System.arraycopy(this.eulrate_des, 0, outobj.eulrate_des, 0, 3); 
        outobj.qJd_des = new float[(int) 12];
        System.arraycopy(this.qJd_des, 0, outobj.qJd_des, 0, 12); 
        outobj.eul = new float[(int) 3];
        System.arraycopy(this.eul, 0, outobj.eul, 0, 3); 
        outobj.pos = new float[(int) 3];
        System.arraycopy(this.pos, 0, outobj.pos, 0, 3); 
        outobj.qJ = new float[(int) 12];
        System.arraycopy(this.qJ, 0, outobj.qJ, 0, 12); 
        outobj.vWorld = new float[(int) 3];
        System.arraycopy(this.vWorld, 0, outobj.vWorld, 0, 3); 
        outobj.eulrate = new float[(int) 3];
        System.arraycopy(this.eulrate, 0, outobj.eulrate, 0, 3); 
        outobj.qJd = new float[(int) 12];
        System.arraycopy(this.qJd, 0, outobj.qJd, 0, 12); 
        return outobj;
    }
 
}

